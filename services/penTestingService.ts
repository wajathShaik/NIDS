import { GoogleGenAI, Type } from "@google/genai";
import type { Vulnerability } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

// Schemas for structured JSON responses
const reconSchema = {
    type: Type.OBJECT,
    properties: {
        subdomains: { type: Type.ARRAY, items: { type: Type.STRING } },
        open_ports: {
            type: Type.ARRAY,
            items: {
                type: Type.OBJECT,
                properties: {
                    port: { type: Type.INTEGER },
                    service: { type: Type.STRING },
                    description: { type: Type.STRING },
                },
                required: ['port', 'service', 'description'],
            },
        },
        technologies: {
            type: Type.ARRAY,
            items: {
                type: Type.OBJECT,
                properties: {
                    name: { type: Type.STRING },
                    category: { type: Type.STRING },
                },
                 required: ['name', 'category'],
            },
        },
        potential_vulnerabilities: {
            type: Type.ARRAY,
            items: { type: Type.STRING }
        },
    },
     required: ['subdomains', 'open_ports', 'technologies', 'potential_vulnerabilities'],
};

const vulnerabilitySchema = {
    type: Type.ARRAY,
    items: {
        type: Type.OBJECT,
        properties: {
            cve_id: { type: Type.STRING },
            severity: { type: Type.STRING, enum: ['Critical', 'High', 'Medium', 'Low', 'Informational'] },
            description: { type: Type.STRING },
            recommendation: { type: Type.STRING },
        },
         required: ['cve_id', 'severity', 'description', 'recommendation'],
    }
};


export const penTestingService = {
    async runReconnaissance(domain: string) {
        try {
            const response = await ai.models.generateContent({
                model: "gemini-2.5-flash",
                contents: `Simulate a detailed reconnaissance scan for the domain "${domain}". Generate plausible data for a typical corporate website. Include common subdomains, standard open ports with services, detected web technologies (frameworks, servers, CMS), and a list of high-level potential vulnerabilities based on this stack.`,
                config: {
                    systemInstruction: "You are a cybersecurity reconnaissance tool simulator. Output valid JSON based on the provided schema.",
                    responseMimeType: "application/json",
                    responseSchema: reconSchema,
                },
            });
            const jsonString = response.text.trim();
            return JSON.parse(jsonString);
        } catch (error) {
            console.error("Error during reconnaissance scan:", error);
            throw new Error("Failed to generate reconnaissance data from Gemini API.");
        }
    },

    async scanVulnerabilities(technology: string) {
        try {
             const response = await ai.models.generateContent({
                model: "gemini-2.5-flash",
                contents: `Generate a list of 5-7 common historical or potential CVEs (Common Vulnerabilities and Exposures) for the technology: "${technology}". For each CVE, provide a plausible ID, a severity level, a brief description of the vulnerability, and a concise remediation recommendation.`,
                config: {
                    systemInstruction: "You are a vulnerability scanner simulator. Output valid JSON based on the provided schema.",
                    responseMimeType: "application/json",
                    responseSchema: vulnerabilitySchema,
                },
            });
            const jsonString = response.text.trim();
            return JSON.parse(jsonString);
        } catch (error) {
             console.error(`Error scanning vulnerabilities for ${technology}:`, error);
            throw new Error("Failed to generate vulnerability data from Gemini API.");
        }
    },
    
    async generateExploitScript(vulnerability: Pick<Vulnerability, 'cve_id' | 'description'>): Promise<string> {
        try {
            const prompt = `
                Generate a safe, conceptual, and non-functional Python script for educational purposes that demonstrates the *logic* of a potential exploit for the following vulnerability.

                Vulnerability: ${vulnerability.cve_id} - ${vulnerability.description}

                **IMPORTANT SAFETY RULES:**
                1.  The script MUST NOT contain any real, harmful, or functional exploit code.
                2.  It should use placeholder functions and extensive comments to explain each step of the hypothetical attack (e.g., target connection, payload crafting, sending payload, handling response).
                3.  The script's primary purpose is to educate a security analyst on the *process* of an exploit, not to provide a usable weapon.
                4.  Start the script with a prominent disclaimer comment block explaining that this is a simulation for educational use only and is not functional.
            `;
            const response = await ai.models.generateContent({
                model: "gemini-2.5-flash",
                contents: prompt,
                config: {
                    systemInstruction: "You are a cybersecurity educator creating safe, conceptual code examples. You MUST adhere to all safety rules and produce a non-functional, descriptive script.",
                },
            });
            return response.text.trim();
        } catch (error) {
            console.error(`Error generating exploit script for ${vulnerability.cve_id}:`, error);
            return `# An error occurred while generating the script.`;
        }
    },
    
    async generatePentestReport(reconData: any, vulnerabilityData: any[], exploitScripts: any[]): Promise<string> {
        try {
            const prompt = `
                You are a senior penetration tester writing a final report. Based on the JSON data provided below from the reconnaissance and vulnerability scanning phases, generate a comprehensive and professional penetration test report in Markdown format.

                **Report Structure:**
                1.  **Executive Summary:** A high-level overview for management. Summarize the key findings and overall risk posture.
                2.  **Scope & Methodology:** Briefly describe the target and the steps taken (Recon, Scanning, etc.).
                3.  **Findings & Recommendations:** For each vulnerability found, create a section with its title (CVE ID), severity, description, and a detailed recommendation for remediation.
                4.  **Reconnaissance Data:** Include a summary of the discovered subdomains, open ports, and technologies.
                5.  **Conceptual Exploits:** Briefly mention the types of exploits that were conceptualized.

                **Data:**
                - Reconnaissance: ${JSON.stringify(reconData, null, 2)}
                - Vulnerabilities: ${JSON.stringify(vulnerabilityData, null, 2)}
            `;
             const response = await ai.models.generateContent({
                model: "gemini-2.5-flash",
                contents: prompt,
                config: {
                    systemInstruction: "You are an expert cybersecurity report writer. The output must be well-structured Markdown.",
                },
            });
            return response.text.trim();
        } catch (error) {
            console.error("Error generating penetration test report:", error);
            return `## Report Generation Failed\n\nAn error occurred while communicating with the AI.`;
        }
    }
};