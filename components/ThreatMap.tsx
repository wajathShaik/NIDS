
import React, { useState, useEffect } from 'react';

// Simplified SVG path for a world map (Mercator projection)
const worldMapPath = "M0,91.8L3.2,91.1L3.9,92.5L14.7,92.5L15.4,94.2L17.5,95.3L18.9,94.2L20.3,95.3L21,94.6L22.1,95.3L23.1,97.3L25.2,97L25.6,97.7L25.9,97L26.6,97.7L28,96.3L28.7,97.3L29.7,97.3L30.1,98L31.1,98L31.8,98.7L32.2,98L33.2,98.3L34.6,98L35.6,98.7L36,98.3L38.1,99L39.1,98.3L39.5,99L40.2,99L40.9,99.7L41.6,99.7L42.3,99L42.6,99.7L43.3,99.3L44,100L46.1,99.3L46.8,100L49.6,100L50.3,100.7L51,100L51.3,100.7L52.7,100.3L53.4,101L55.5,100L56.1,101L56.8,100.7L57.5,101.7L58.2,101L59.2,102.1L60.6,101.7L62,102.4L63.4,101.7L64.1,102.7L64.8,102.4L65.5,103.1L66.1,102.4L66.8,103.1L67.5,102.7L68.2,103.4L69.2,103.1L70.6,104.1L71.3,103.4L72,104.1L72.7,103.8L73.3,104.5L74,104.1L75.4,105.2L76.1,104.5L76.8,105.2L77.5,104.8L78.1,105.5L79.5,105.2L80.2,105.8L80.9,105.5L82.2,106.2L82.9,105.5L83.6,106.2L85,105.8L85.7,106.5L86.7,106.2L87.4,106.9L88.1,106.5L88.8,107.2L89.8,106.9L90.5,107.6L91.8,107.2L93.2,108.3L94.2,107.9L95.2,108.6L96.2,108.3L97.6,109.3L98.3,109L99.7,110L101,109.3L101.7,110L102.4,109.7L103.1,110.4L103.8,110L104.4,110.7L105.1,110.4L105.8,111L106.5,110.7L107.5,111.4L108.2,111L109.2,111.7L110.2,111.4L111.2,112.1L112.2,111.7L113.6,112.8L114.3,112.4L115.3,113.1L116,112.8L116.7,113.5L118,113.1L119.4,114.2L120.1,113.8L121.1,114.5L122.1,114.2L123.1,114.8L124.1,114.5L125.1,115.2L126.1,114.8L127.5,115.9L128.5,115.5L129.5,116.2L130.5,115.9L131.5,116.6L132.5,116.2L133.8,117.3L135.2,116.9L136.2,117.6L137.2,117.3L138.2,118L139.2,117.6L140.5,118.7L141.9,118.3L143.2,119.4L144.6,119L145.6,119.7L146.6,119.4L147.6,120L148.6,119.7L150,120.7L151.3,120.4L152.7,121.4L154.1,121.1L155.1,121.7L156.1,121.4L157.1,122.1L158.1,121.7L159.4,122.8L160.8,122.4L162.1,123.5L163.5,123.1L164.5,123.8L165.5,123.5L166.5,124.1L167.5,123.8L168.8,124.9L170.2,124.5L171.5,125.6L172.9,125.2L174.2,126.3L175.6,125.9L176.6,126.6L177.6,126.3L178.6,127L179.6,126.6L180.9,127.7L182.3,127.3L183.6,128.4L185,128L186,128.7L187,128.4L188,129L189,128.7L190.3,129.7L191.7,129.4L193.1,130.4L194.4,130.1L195.8,131.1L197.1,130.8L198.5,131.8L199.9,131.4L201.2,132.5L202.6,132.1L203.9,133.2L205.3,132.8L206.6,133.9L208,133.5L209.3,134.6L210.7,134.2L212.1,135.3L213.4,134.9L214.8,136L216.1,135.6L217.5,136.7L218.8,136.3L220.2,137.4L221.5,137L222.9,138.1L224.2,137.7L225.6,138.8L226.9,138.4L228.3,139.5L229.6,139.1L231,140.2L232.3,139.8L233.7,140.9L235,140.5L236.4,141.6L237.7,141.2L239.1,142.3L240.4,141.9L241.8,143L243.1,142.6L244.5,143.7L245.8,143.3L247.2,144.4L248.5,144L249.9,145.1L251.2,144.7L252.6,145.8L253.9,145.4L255.3,146.5L256.6,146.1L258,147.2L259.3,146.8L260.7,147.9L262,147.5L263.4,148.6L264.7,148.2L266.1,149.3L267.4,148.9L268.8,150L270.1,149.6L271.5,150.7L272.8,150.3L274.2,151.4L275.5,151L276.9,152.1L278.2,151.7L279.6,152.8L280.9,152.4L282.3,153.5L283.6,153.1L285,154.2L286.3,153.8L287.7,154.9L289,154.5L290.4,155.6L291.7,155.2L293.1,156.3L294.4,155.9L295.8,157L297.1,156.6L298.5,157.7L299.8,157.3L301.2,158.4L302.5,158L303.9,159.1L305.2,158.7L306.6,159.8L307.9,159.4L309.3,160.5L310.6,160.1L312,161.2L313.3,160.8L314.7,161.9L316,161.5L317.4,162.6L318.7,162.2L320.1,163.3L321.4,162.9L322.8,164L324.1,163.6L325.5,164.7L326.8,164.3L328.2,165.4L329.5,165L330.9,166.1L332.2,165.7L333.6,166.8L334.9,166.4L336.3,167.5L337.6,167.1L339,168.2L340.3,167.8L341.7,168.9L343,168.5L344.4,169.6L345.7,169.2L347.1,170.3L348.4,169.9L349.8,171L351.1,170.6L352.5,171.7L353.8,171.3L355.2,172.4L356.5,172L357.9,173.1L359.2,172.7L360.6,173.8L361.9,173.4L363.3,174.5L364.6,174.1L366,175.2L367.3,174.8L368.7,175.9L370,175.5L371.4,176.6L372.7,176.2L374.1,177.3L375.4,176.9L376.8,178L378.1,177.6L379.5,178.7L380.8,178.3L382.2,179.4L383.5,179L384.9,180.1L386.2,179.7L387.6,180.8L388.9,180.4L390.3,181.5L391.6,181.1L393,182.2L394.3,181.8L395.7,182.9L397,182.5L398.4,183.6L399.7,183.2L401.1,184.3L402.4,183.9L403.8,185L405.1,184.6L406.5,185.7L407.8,185.3L409.2,186.4L410.5,186L411.9,187.1L413.2,186.7L414.6,187.8L415.9,187.4L417.3,188.5L418.6,188.1L420,189.2L421.3,188.8L422.7,189.9L424,189.5L425.4,190.6L426.7,190.2L428.1,191.3L429.4,190.9L430.8,192L432.1,191.6L433.5,192.7L434.8,192.3L436.2,193.4L437.5,193L438.9,194.1L440.2,193.7L441.6,194.8L442.9,194.4L444.3,195.5L445.6,195.1L447,196.2L448.3,195.8L449.7,196.9L451,196.5L452.4,197.6L453.7,197.2L455.1,198.3L456.4,197.9L457.8,199L459.1,198.6L460.5,199.7L461.8,199.3L463.2,200.4L464.5,200L465.9,201.1L467.2,200.7L468.6,201.8L469.9,201.4L471.3,202.5L472.6,202.1L474,203.2L475.3,202.8L476.7,203.9L478,203.5L479.4,204.6L480.7,204.2L482.1,205.3L483.4,204.9L484.8,206L486.1,205.6L487.5,206.7L488.8,206.3L490.2,207.4L491.5,207L492.9,208.1L494.2,207.7L495.6,208.8L496.9,208.4L498.3,209.5L499.6,209.1L501,210.2L502.3,209.8L503.7,210.9L505,210.5L506.4,211.6L507.7,211.2L509.1,212.3L510.4,211.9L511.8,213L513.1,212.6L514.5,213.7L515.8,213.3L517.2,214.4L518.5,214L519.9,215.1L521.2,214.7L522.6,215.8L523.9,215.4L525.3,216.5L526.6,216.1L528,217.2L529.3,216.8L530.7,217.9L532,217.5L533.4,218.6L534.7,218.2L536.1,219.3L537.4,218.9L538.8,220L540.1,219.6L541.5,220.7L542.8,220.3L544.2,221.4L545.5,221L546.9,222.1L548.2,221.7L549.6,222.8L550.9,222.4L552.3,223.5L553.6,223.1L555,224.2L556.3,223.8L557.7,224.9L559,224.5L560.4,225.6L561.7,225.2L563.1,226.3L564.4,225.9L565.8,227L567.1,226.6L568.5,227.7L569.8,227.3L571.2,228.4L572.5,228L573.9,229.1L575.2,228.7L576.6,229.8L577.9,229.4L579.3,230.5L580.6,230.1L582,231.2L583.3,230.8L584.7,231.9L586,231.5L587.4,232.6L588.7,232.2L590.1,233.3L591.4,232.9L592.8,234L594.1,233.6L595.5,234.7L596.8,234.3L598.2,235.4L599.5,235L600,235.5L600,0L0,0L0,91.8Z";

const cityCoordinates = {
    'New York': { x: 185, y: 100 }, 'London': { x: 298, y: 84 },
    'Tokyo': { x: 535, y: 105 }, 'Sydney': { x: 560, y: 155 },
    'Moscow': { x: 360, y: 80 }, 'Beijing': { x: 490, y: 100 },
    'Sao Paulo': { x: 225, y: 145 }, 'Cairo': { x: 350, y: 110 },
    'Los Angeles': { x: 130, y: 105 }, 'Singapore': { x: 485, y: 130 },
};

type CityName = keyof typeof cityCoordinates;
interface Attack { id: number; from: CityName; to: CityName; color: string; }

const ThreatMap: React.FC = () => {
    const [attacks, setAttacks] = useState<Attack[]>([]);

    useEffect(() => {
        const createAttack = () => {
            const cities = Object.keys(cityCoordinates) as CityName[];
            let from: CityName, to: CityName;
            do {
                from = cities[Math.floor(Math.random() * cities.length)];
                to = cities[Math.floor(Math.random() * cities.length)];
            } while (from === to);
            
            const colors = ['#ef4444', '#f97316', '#eab308'];
            const newAttack: Attack = {
                id: Date.now() + Math.random(),
                from,
                to,
                color: colors[Math.floor(Math.random() * colors.length)],
            };

            setAttacks(prev => [...prev.slice(-10), newAttack]);
        };

        const intervalId = setInterval(createAttack, 2000); // New attack every 2 seconds
        return () => clearInterval(intervalId);
    }, []);

    const renderArc = (attack: Attack) => {
        const from = cityCoordinates[attack.from];
        const to = cityCoordinates[attack.to];
        const controlX = (from.x + to.x) / 2;
        const controlY = Math.min(from.y, to.y) - Math.abs(to.x - from.x) * 0.4;
        const path = `M${from.x},${from.y} Q${controlX},${controlY} ${to.x},${to.y}`;
        
        return (
             <g key={attack.id}>
                <path
                    d={path}
                    stroke={attack.color}
                    strokeWidth="1.5"
                    fill="none"
                    strokeLinecap="round"
                    className="attack-arc"
                    style={{ filter: `drop-shadow(0 0 3px ${attack.color})` }}
                />
            </g>
        );
    };

    return (
        <div className="relative aspect-video">
            <style>{`
                .attack-arc {
                    animation: draw-arc 2s ease-out forwards;
                    stroke-dasharray: 1000;
                    stroke-dashoffset: 1000;
                }
                @keyframes draw-arc {
                    to { stroke-dashoffset: 0; }
                }
                .city-dot {
                    animation: pulse-city 2.5s infinite;
                }
                @keyframes pulse-city {
                    0%, 100% { r: 2; opacity: 1; filter: drop-shadow(0 0 2px #58a6ff); }
                    50% { r: 5; opacity: 0.7; filter: drop-shadow(0 0 5px #58a6ff); }
                }
            `}</style>
            <svg viewBox="0 0 600 300" className="w-full h-full">
                 <defs>
                    <radialGradient id="map-glow" cx="50%" cy="50%" r="50%">
                        <stop offset="0%" stopColor="rgba(88, 166, 255, 0.2)" />
                        <stop offset="100%" stopColor="rgba(88, 166, 255, 0)" />
                    </radialGradient>
                </defs>
                <path d={worldMapPath} fill="#21262d" stroke="#30363d" strokeWidth="0.5" />
                <rect width="600" height="300" fill="url(#map-glow)" />

                {Object.entries(cityCoordinates).map(([city, coords]) => (
                    <circle key={city} cx={coords.x} cy={coords.y} r="2" fill="#58a6ff" className="city-dot" />
                ))}

                <g>{attacks.map(renderArc)}</g>
            </svg>
        </div>
    );
};

export default ThreatMap;